<!doctype html>

<head>
<meta charset="utf-8">
<title>Limitless New Worlds App</title>
<meta name="description" content="Limitless New Worlds App">
<meta name="viewport" content="width=device-width">
<link rel="stylesheet" href="css/reset.css">
<link rel="stylesheet" href="css/styles.css">
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
<script type="text/javascript" src="http://www.parsecdn.com/js/parse-1.2.16.min.js"></script>
</head>

<body style="margin-left: auto; margin-right: auto;">

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- BasicMobile -->
<ins class="adsbygoogle"
     style="display:inline-block;width:320px;height:50px"
          data-ad-client="ca-pub-4607407591120500"
               data-ad-slot="7386716933"></ins>
               <script>
               (adsbygoogle = window.adsbygoogle || []).push({});
               </script>

<p>Upload an item.</p>

<form>
Send to user:<br>
Username: <input id="usernameText" type="text" name="username"><br>
Password:  <input id="passwordText" type="password" name="pwd"><br>

<div id="existingVideo">
<br>Existing Video:<br>
<div id= "ExistingVideosTable"> <!-- style="height:100px;overflow:auto;"> -->
</div>
</form>
<br>
</div>

<div id="newVideo">
New Video:
<form id="fileupload" name="fileupload" enctype="multipart/form-data" method="POST">
<fieldset>
<input type="file" name="fileselect" id="fileselect"></input>
<br><br>
<div id="uploadButton">
<input id="uploadbutton" type="button" value="Upload New Video to Server"/>
</div>
<br>
<div id="uploadNote" style="display:inline">
Note: must be an Android compatible <a href="http://developer.android.com/guide/appendix/media-formats.html">video format</a> and under 10 Mb in size. File may upload correctly, but still not display properly on the device.
</div>
</fieldset>
</form>
</div>

<form>
<br>Times:<br>
<input type="radio" name="number" value="now" onclick="nowClicked()"> Right Now<br>
<input type="radio" name="number" value="once" onclick="numberClicked('1')"> Once<br>
<input type="radio" name="number" value="five" onclick="numberClicked('5')"> 5 Times<br>
<input type="radio" name="number" value="ten" onclick="numberClicked('10')"> 10 Times<br>
<input type="radio" name="number" value="twenty" onclick="numberClicked('20')"> 20 Times<br>
<input type="radio" name="number" value="fifty" onclick="numberClicked('50')"> 50 Times<br>
<br>
<div id="everyMinutesBlock">
<div id="minutesIntro" style="display:inline">Every </div><input id="everyMinutes" type="number" name="frequency"> Minutes<br>
<br>
</div>
<div id="randomTime">
Randomize Time:<br>
<input id="randomizeCheck" type="checkbox" name="randomTime" value="random">Randomize Time (Not exactly every <div id="xMinutes" style="display:inline">x</div> minutes, but instead has some variation)
<br>
<br>
</div>
</form>

<button id="submitButton" onclick="getUserId()">Submit</button>  

<br><br>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- BasicMobile -->
<ins class="adsbygoogle"
     style="display:inline-block;width:320px;height:50px"
          data-ad-client="ca-pub-4607407591120500"
               data-ad-slot="7386716933"></ins>
               <script>
               (adsbygoogle = window.adsbygoogle || []).push({});
               </script>

<p><br>
Description:<br>
Fortunate is an app that looks like a simple fortune cookie app. The app opens, there is a closed fortune cookie. Clicking the cookie opens it, revealing a fortune.<br><br>
Use:<br>
It's simple and somewhat interesting for a reason. It's inconspicuous and your friends might not delete it. However, as soon as it's on their phone you can start sending them videos and no matter what app they are using at the time your video will pop-up and there will be no indication that the Fortunate app was to blame.
<br><br>
Instructions:<br>
1. Download the "Fortunate" app on the phone you want to send videos to (Android only).<br>
2. Open the app and log in or create an account. You'll need the account to identify the phone that receives the video.<br>
3. Pick a video and choose how often and when you want to send it.<br>
</p>

<script type="text/javascript">
Parse.initialize("XU9i99pQgxtjWVBIEZ37OvvkZ1N5dMqINLDEA6se", "M4tPIKYre9BfDDBBzwrq1MnvWKjqpURb9VCtopki");

function nowClicked()
{
    document.getElementById("everyMinutesBlock").style.display = 'none';
    document.getElementById("randomTime").style.display = 'none';
}

function numberClicked(radioNumber)
{
    if(radioNumber == 1)
    {
    document.getElementById("minutesIntro").innerHTML = "Display in ";
    document.getElementById("randomTime").style.display = 'none';
    }
    else
    {
    document.getElementById("xMinutes").innerHTML = radioNumber;
    document.getElementById("minutesIntro").innerHTML = "Every ";
    document.getElementById("randomTime").style.display = 'block';
    }

    document.getElementById("everyMinutesBlock").style.display = 'inline';
}

var Movie = Parse.Object.extend("Movie");
refreshMovieRadios();
var movieObjectId = -1;
var moviesArray;

function refreshMovieRadios()
{
    var query = new Parse.Query(Movie);
    query.descending("views");
    query.find({
success: function(movies) {
moviesArray = movies;
var tableElement = document.getElementById("ExistingVideosTable");
tableElement.innerHTML = "";
for(var i = 0; i < movies.length; ++i)
{
var file = movies[i].get("file");
var fullname = file.name();
var url = file.url();
var index = nthOccurrence(fullname, "-", 4) + 1;
var filename = fullname.substr(index);
tableElement.innerHTML += "<input type='radio' name='videoSelect' value=" + i + "> " + filename + " <a href='" + url + "'>Preview</a> <br>";
}       

},
error: function(object, error) {
}
});
}

function nthOccurrence(str, c, n) {
    var pos = str.indexOf(c);
    while (n-- > 0 && pos != -1)
        pos = str.indexOf(c, pos+1);
    return pos;
}

$(function() {
        
        var file;

        // Set an event listener on the Choose File field.
        $('#fileselect').bind("change", function(e) {
            var files = e.target.files || e.dataTransfer.files;
            // Our file var now holds the selected file
            file = files[0];
            });

        // This function is called when the user clicks on Upload to Parse. It will create the REST API request to upload this image to Parse.
        $('#uploadbutton').click(function() {

        document.getElementById("uploadNote").innerHTML = "Uploading Video...";

        if(file.size > 10000000)
        {
            document.getElementById("uploadNote").innerHTML = "Video file is too large. Must be less than 10 Mb.";
            return;
        }

var index = file.name.indexOf(".") + 1;
var extension = file.name.substr(index); 

        if(extension != "mp4" && extension != "3gb" && extension != "ts" && extension != "webm" && extension != "mkv")
        {
            document.getElementById("uploadNote").innerHTML = "Invalid video format.";
            return;
        }

        document.getElementById("submitButton").style.display = 'none';
            var serverUrl = 'https://api.parse.com/1/files/' + file.name;

            $.ajax({
type: "POST",
beforeSend: function(request) {
request.setRequestHeader("X-Parse-Application-Id", 'XU9i99pQgxtjWVBIEZ37OvvkZ1N5dMqINLDEA6se');
request.setRequestHeader("X-Parse-REST-API-Key", '9NENdGYSKwBTOBNm5HaOmiGOKDiO23hroqnwvuYX');
request.setRequestHeader("Content-Type", file.type);
},
url: serverUrl,
data: file,
processData: false,
contentType: false,
success: function(data) {
var movieSpecific = new Movie();
var url = data.url;
movieSpecific.set("file", {
name: url.substring(url.lastIndexOf('/') + 1),
url: url,
__type: "File"
});
movieSpecific.set("views", 0);
movieSpecific.save(null, {
success: function(movieResult) {
// Execute any logic that should take place after the object is saved.
movieObjectId = movieResult.id;
        document.getElementById("uploadNote").innerHTML = "Upload Complete!";
},
error: function(movieResult, error) {
// Execute any logic that should take place if the save fails.
// error is a Parse.Error with an error code and description.
        document.getElementById("uploadNote").innerHTML = "Upload Failed";
}
});

        document.getElementById("submitButton").style.display = 'initial';
        //alert("File available at: " + data.url);
},
error: function(data) {
           var obj = jQuery.parseJSON(data);
           alert(obj.error);
       }
});
});


});

var scatter = 6;

function sendPush(userId)
{

    if(userId === "failed")
    {
        alert("User Not Found");
        return;
    }

    var channel = "user_" + userId;

    var frequency = parseInt(document.getElementById("everyMinutes").value);

    var numTimes = -1;
    var numberTimesRadios = document.getElementsByName('number');
    for(var i = 0; i < numberTimesRadios.length; i++)
    {
        if(numberTimesRadios[i].checked)
        {
            numTimes = i;
            break;
        }
    }

    if(numTimes < 0)
    {
        alert("You must select a time to send the video");
        return;
    }

    if(frequency <= 0)
    {
        alert("Every x number of minutes must be postive");
        return;
    }

    switch(numTimes)
    {
        case 2:
            numTimes = 5;
            break;
        case 3:
            numTimes = 10;
            break;
        case 4:
            numTimes = 20;
            break;
        case 5:
            numTimes = 50;
            break;
    }

    var randomize = document.getElementById("randomizeCheck").checked;
    var videoNum = -1;
    var finalVideoObjectId = movieObjectId;
    var videoNumRadios = document.getElementsByName('videoSelect'); //change to video to and comment stuff back in to use old method

    for(var i = 0; i < videoNumRadios.length; i++)
    {
        if(videoNumRadios[i].checked)
        {
            videoNum = i;
            break;
        }
    }

    if(videoNum != -1 && finalVideoObjectId == -1)
    {
        finalVideoObjectId = moviesArray[videoNum].id;
    }

    if(finalVideoObjectId == -1)
    {
        alert("Must Choose or Upload Video");
        return;
    }

    var query = new Parse.Query(Movie);
    query.get(finalVideoObjectId, {
      success: function(movie) {
                var currentViews = +movie.get("views") || 0;
                movie.set("views", (currentViews + 1)); 
                movie.save();
            },
              error: function(object, error) {
                  // The object was not retrieved successfully.
                      // error is a Parse.Error with an error code and description.
                        }
                        });

    var timeToSend = new Date().getTime();

    var sendNow = numTimes == 0;
    if(sendNow)
        numTimes = 1;
    else if(randomize)
        timeToSend += Math.max(1, getRandomInt(frequency-scatter, frequency+scatter)) * 60000; 
    else
        timeToSend += frequency * 60000;

    for(var i = 0; i < numTimes; i++)
    {

        /*  var localVideoNum = videoNum;
            if(videoNum == 3)
            localVideoNum = Math.floor(Math.random()*3); 
videoNum: localVideoNum,
         */

        Parse.Cloud.run('Send', { channel: channel, pushTime: timeToSend, URL: "none", videoObjectId: finalVideoObjectId }, {
success: function(result) {
},
error: function(error) {
}
});
if(randomize)
    timeToSend += Math.max(1, getRandomInt(frequency-scatter, frequency+scatter)) * 60000; 
    else
    timeToSend += frequency * 60000;

    }

alert("Notifications Scheduled Successfully!");

}

function getUserId()
{

    Parse.User.logIn(document.getElementById("usernameText").value, document.getElementById("passwordText").value, {
success: function(user) {
sendPush(user.id);
},
error: function(user, error) {
sendPush("failed");
}
});
}

function getRandomInt (min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

</script>
</body>

</html>
